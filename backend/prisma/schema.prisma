generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int                @id @default(autoincrement())
  username   String             @unique
  email      String             @unique
  password   String
  reviews    Review[]
  libraries  Library[]
  challenges ReadingChallenge[]
  friends    Friendship[]       @relation("UserFriends")
  addedMe    Friendship[]       @relation("FriendOf")

  createdAt DateTime @default(now())
}

model Book {
  id            Int      @id @default(autoincrement())
  title         String
  author        String
  publishDate   DateTime
  averageRating Float?
  language      String?
  reviewCount   Int?
  pages         Int
  description   String?
  coverUrl      String?

  reviews      Review[]
  inLibraries  LibraryEntry[]
  inChallenges ChallengeEntry[]
}

model Review {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  book   Book @relation(fields: [bookId], references: [id])
  bookId Int

  rating          Float
  text            String?
  pace            Pace?
  focus           Focus?
  lovable         Boolean?
  contentWarnings String?

  createdAt DateTime @default(now())

  moods  Mood[]  @relation("ReviewMoods")
  tropes Trope[] @relation("ReviewTropes")
  genres Genre[] @relation("ReviewGenres")
}

model Mood {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  reviews Review[] @relation("ReviewMoods")
}

model Trope {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  reviews Review[] @relation("ReviewTropes")
}

model Genre {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  reviews Review[] @relation("ReviewGenres")
}

model Library {
  id      Int            @id @default(autoincrement())
  user    User           @relation(fields: [userId], references: [id])
  userId  Int
  name    String
  type    LibraryType
  entries LibraryEntry[]
}

model LibraryEntry {
  id        Int      @id @default(autoincrement())
  library   Library  @relation(fields: [libraryId], references: [id])
  libraryId Int
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  addedAt   DateTime @default(now())
}

model ReadingChallenge {
  id        Int  @id @default(autoincrement())
  user      User @relation(fields: [userId], references: [id])
  userId    Int
  year      Int
  goal      Int
  completed Int  @default(0)

  entries ChallengeEntry[]
}

model ChallengeEntry {
  id          Int              @id @default(autoincrement())
  challenge   ReadingChallenge @relation(fields: [challengeId], references: [id])
  challengeId Int
  book        Book             @relation(fields: [bookId], references: [id])
  bookId      Int
  finishedAt  DateTime
}

model Friendship {
  id       Int  @id @default(autoincrement())
  user     User @relation("UserFriends", fields: [userId], references: [id])
  userId   Int
  friend   User @relation("FriendOf", fields: [friendId], references: [id])
  friendId Int

  createdAt DateTime @default(now())

  @@unique([userId, friendId])
}

enum LibraryType {
  CURRENTLY_READING
  PHYSICAL_TBR
  WANT_TO_READ
  READ
  CUSTOM
}

enum Pace {
  FAST
  MEDIUM
  SLOW
}

enum Focus {
  PLOT
  CHARACTER
  BOTH
}
