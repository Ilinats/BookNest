generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int                @id @default(autoincrement())
  username   String             @unique
  email      String             @unique
  password   String
  createdAt  DateTime           @default(now())
  addedMe    Friendship[]       @relation("FriendOf")
  friends    Friendship[]       @relation("UserFriends")
  libraries  Library[]
  challenges ReadingChallenge[]
  reviews    Review[]
}

model Book {
  id            Int              @id @default(autoincrement())
  title         String
  author        String
  publishDate   DateTime
  averageRating Float?
  language      String?
  reviewCount   Int?
  pages         Int
  description   String?
  coverUrl      String?
  inChallenges  ChallengeEntry[]
  inLibraries   LibraryEntry[]
  reviews       Review[]
}

model Review {
  id              Int      @id @default(autoincrement())
  userId          Int
  bookId          Int
  rating          Float
  text            String?
  pace            Pace?
  focus           Focus?
  lovable         Boolean?
  contentWarnings String?
  createdAt       DateTime @default(now())
  book            Book     @relation(fields: [bookId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  genres          Genre[]  @relation("ReviewGenres")
  moods           Mood[]   @relation("ReviewMoods")
  tropes          Trope[]  @relation("ReviewTropes")
}

model Mood {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  reviews Review[] @relation("ReviewMoods")
}

model Trope {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  reviews Review[] @relation("ReviewTropes")
}

model Genre {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  reviews Review[] @relation("ReviewGenres")
}

model Library {
  id      Int            @id @default(autoincrement())
  userId  Int
  name    String
  type    LibraryType
  user    User           @relation(fields: [userId], references: [id])
  entries LibraryEntry[]
}

model LibraryEntry {
  id        Int      @id @default(autoincrement())
  libraryId Int
  bookId    Int
  addedAt   DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id])
  library   Library  @relation(fields: [libraryId], references: [id])

  @@unique([libraryId, bookId])
}

model ReadingChallenge {
  id        Int              @id @default(autoincrement())
  userId    Int
  goal      Int
  completed Int              @default(0)
  endDate   DateTime
  name      String
  startDate DateTime
  entries   ChallengeEntry[]
  user      User             @relation(fields: [userId], references: [id])
}

model ChallengeEntry {
  id          Int              @id @default(autoincrement())
  challengeId Int
  bookId      Int
  finishedAt  DateTime
  book        Book             @relation(fields: [bookId], references: [id])
  challenge   ReadingChallenge @relation(fields: [challengeId], references: [id])
}

model Friendship {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  createdAt DateTime @default(now())
  friend    User     @relation("FriendOf", fields: [friendId], references: [id])
  user      User     @relation("UserFriends", fields: [userId], references: [id])

  @@unique([userId, friendId])
}

enum LibraryType {
  CURRENTLY_READING
  PHYSICAL_TBR
  WANT_TO_READ
  READ
  CUSTOM
}

enum Pace {
  FAST
  MEDIUM
  SLOW
}

enum Focus {
  PLOT
  CHARACTER
  BOTH
}
